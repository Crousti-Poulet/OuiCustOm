<?php

namespace App\Controller;

use App\Entity\CustomRequest;
use App\Form\CustomRequestAddForm;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;

class CustomRequestController extends Controller
{

    /**
     * @Route("/customrequest/list/new", name="custom_request_list_new")
     * demandes de tous les utilisateurs à l'état "créée"
     * visibles uniquement par les artistes
     */
    public function listNewCustomRequests()
    {
        $custom_requests = $this->getDoctrine()->getManager()->getRepository(CustomRequest::class)->findAllByStatus(CustomRequest::STATUS_EN_ATTENTE);
        return $this->render('/custom_request/list.html.twig', [
            'custom_requests' => $custom_requests,
            'title' => 'Demandes à attribuer'
        ]);
    }

    /**
     * @Route("/customrequest/list", name="custom_request_list")
     * demandes créées par l'utilisateur connecté
     */
    public function listCustomRequestsByUserLoggedIn()
    {
        $custom_requests = $this->getDoctrine()->getManager()->getRepository(CustomRequest::class)->findAllByUser($this->getUser());
        return $this->render('/custom_request/list.html.twig', [
            'custom_requests' => $custom_requests,
            'title' => 'Mes demandes de customisation'
        ]);
    }

    /**
     * @Route("/customrequest/list/assigned", name="custom_request_list_assigned")
     * demandes affectées à un artisan connecté
     */
    public function listCustomRequestsByArtistLoggedIn()
    {
        $custom_requests = $this->getDoctrine()->getManager()->getRepository(CustomRequest::class)->findAllByUserAssignedTo($this->getUser());
        return $this->render('/custom_request/list.html.twig', [
            'custom_requests' => $custom_requests,
            'title' => 'Mes customisations à réaliser'
        ]);
    }

    /**
     * @Route("/customrequest/detail/{id}", name="custom_request_detail")
     */
    public function detailCustomRequest(CustomRequest $customRequest)
    {
            return $this->render('/custom_request/detail.html.twig', [
                'custom_request' => $customRequest
            ]);
    }
    /**
     * @Route("/customrequest/create", name="custom_request_create")
     *@Security("has_role('ROLE_USER', 'ROLE_ARTISTE')")
     */
    public function createCustomRequest(Request $request)
    {

        $customRequest = new CustomRequest();

        $form = $this->createForm(CustomRequestAddForm::class, $customRequest);

        $form->handleRequest($request);

        if($form->isSubmitted() && $form->isValid()){

            $customRequest = $form->getData();

            //upload de la photo de l'objet
            /** @var UploadedFile $file */
            $file = $customRequest->getPhotoPath();
            $fileName = $this->generateUniqueFileName().'.'. $file->guessExtension();
            //déplace le fichier image dans le dossier voulu
            $file->move($this->getParameter('customRequestPictures_directory'),$fileName);
            $customRequest->setPhotoPath($fileName);

            // lier la demande à l'utilisateur loggé
            $customRequest->setUser($this->getUser());

            $em = $this->getDoctrine()->getManager();
            $em->persist($customRequest); // pour créer un nouvel enregistrement dans la base, seulement en création, pas en modif
            $em->flush(); // enregistre dans la base

            return $this->redirect($this->generateUrl('custom_request_create'));
        }
        return $this->render('custom_request/create.html.twig',[
            'form' => $form->createView(),
            'title' => 'Créer une demande de customisation'
        ]);
    }

    /**
     * @Route("/customrequest/accept/{id}", name="custom_request_accept")
     */
    public function acceptCustomRequest(CustomRequest $customRequest)
    {
        $customRequest->setStatus(CustomRequest::STATUS_ASSIGNE);
        $customRequest->setUserAssignedTo($this->getUser());

        $em = $this->getDoctrine()->getManager();
        //$em->persist($customRequest);
        $em->flush();
        // rediriger vers la page des demandes affectées à l'artiste connecté
        return $this->redirectToRoute('custom_request_list_assigned');
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
